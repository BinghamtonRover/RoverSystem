=== [ Version 4 ] ===

This file describes the specification of the rover packet protocol, of version listed above.


==========
= Basics =
==========

The protocol uses UDP over IP. Each application-level packet is sent as a single UDP packet. 
The UDP buffer must be at least the length of the longest packet. This will ensure that all
packets can be read in a single UDP read. All packets must use big-endian byte ordering.

The protocol version is a positive integer which increments each time the packet protocol is
changed. The base station and the rover should only accept packets of the latest version, to
prevent confusion. In order to avoid breaking implementations, the Version field of the packet
header (defined below) MUST be the first field in every packet in every version of the
protocol.


=================
= Packet Header =
=================

All packets share a common header. The format is as follows:

| (Field Name)  | (Field Type)      | (Field Size, in Bytes)    |
-----------------------------------------------------------------
| Version       | unsigned short    | 2                         |
| Packet Type   | unsigned byte     | 1                         |
| Timestamp     | unsigned short    | 2                         |

* Version:      Specifies the protocol version in use. This is to aid debugging and to prevent
                mismatched versions.
* Packet Type:  Specifies the type of the packet. The fields in the remaining bytes of the packet
                are fixed depending on this type. The value used for each packet type is listed
                below with the definition of each packet.
* Timestamp:    This is not to be confused with a Unix timestamp. This value must be incremented
                by one for every packet sent by both the rover and the base station. This is to
                ensure packet order. Implementations should record the timestamp of the last packet
                they receieved and processed, and ignore any incoming packets with a timestamp value 
                less than that of the last packet received. When an implementation assigns the last
                available value of an unsigned short (the decimal value 65535), the next packet sent
                should have the timestamp of 0, and the incrementing per-packet should repeat. If an
                implementation receives a packet with a timestamp of 0, it must accept the packet
                regardless of the timestamp of the last received packet. The base station and the rover
                should keep their own timestamp counters; there should be no attempt to syncronize.

The body of the packet must follow immediately after the packet header.


================
= Packet Types =
================

> Type 0: Ping Packet

The ping packet is sent from either side to make sure that the right IP/port is being used. It can also
be used to check whether the program is responding. If either side receives a ping packet, they must
respond with the direction field set to PONG.

| (Field Name)      | (Field Type)      | (Field Size, in Bytes)    |
---------------------------------------------------------------------
| Direction         | unsigned byte     | 1                         |

* Direction:    Specifies whether the ping is a request or a response (a PING or a PONG, respectively).
                It must be one of the following values:
                    - 0 (PING): A request for a response.
                    - 1 (PONG): A response to a request.

> Type 1: Control Packet

The control packet is used to send instruction state to the rover. These will be sent from base station
to rover at some fixed or variable rate. All fields must be specified in each packet.

| (Field Name)      | (Field Type)      | (Field Size, in Bytes)    |
---------------------------------------------------------------------
| Movement State    | unsigned byte     | 1                         |

* Movement State:   Specifies how the rover must be moving. It must be one of the following values:
                        - 0 (STOP): The rover is at a standstill.
                        - 1 (FORWARD): The rover is moving forward.
                        - 2 (LEFT): The rover is turning left.
                        - 3 (RIGHT): The rover is turning right.
                        - 4 (BACKWARD): The rover is moving backward.
                    The state must remain for the duration of the command. For instance, if the rover
                    is to move forward while a controller button is held, then the FORWARD value must
                    be specified in every control packet sent while the button is held. When the button
                    is released and the rover is expected to stop, the STOP value will be specified i
                    every control packet sent until another button is pressed.

> Type 2: Camera Packet

The camera packet is used to send webcam camera frames from the rover to the base station. These packets
are never repeated; dropped frames are acceptable. Note that timestamps of camera packets are still
checked, since out-of-order frames are unacceptable, but timestamps have a slightly different meaning
for camera packets (see below). Each packet contains a 160 by 90 pixel section of a 640 by 360 pixel frame.

| (Field Name)      | (Field Type)      | (Field Size, in Bytes)    |
---------------------------------------------------------------------
| Section ID        | Unsigned Byte     | 1                         |
| Section Data      | Binary Data       | 43200 (see below)         |

* Section ID:   A single byte which defines what section of a frame the section data represents. This must
                be one of the following:
                    - 0 (TOP_LEFT): The section data represents the top left corner of the frame.
                    - 1 (TOP_RIGHT): The section data represents the top right corner of the frame.
                    - 2 (BOTTOM_LEFT): The section data represents the bottom left corner of the frame.
                    - 3 (BOTTOM_RIGHT): The section data represents the bottom right corner of the frame.
                Thus the resulting frame will be composed of sections as follows:
                    | 0 | 1 |
                    | 2 | 3 |.
* Section Data: The image data of the frame section. This is packed in 90 consecutive rows of 480 bytes.
                Each row represents a horizontal pixel row of the image, starting from the top and moving
                to the bottom. Within each row, there are 160 consecutive 3-byte tuples. Each tuple
                represents a single pixel, moving from the left-most pixel to the right-most pixel in the
                row. The 3-byte tuple contains the red, green, and blue components of each pixel, in that
                order.

The timestamp value in the header of camera packets has a slightly different meaning than that of other
packets. All 4 packets which make up a single camera frame must have the same timestamp value. The sending
side should use the next available timestamp value and assign it to all 4 packets for each frame. The
receiving side must not discard camera packets that have the same timestamp as the last received timestamp.